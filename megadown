#!/bin/bash

VERSION="1.9.9"

HERE=$(dirname "$0")
SCRIPT=$(readlink -f "$0")
HELPERS="$HERE/helpers.py"
PYTHON_MIN_VER="2.6"

MEGA_API_URL="https://g.api.mega.co.nz"
OPENSSL_AES_CTR_128_DEC="openssl enc -d -aes-128-ctr"
OPENSSL_AES_CBC_128_DEC="openssl enc -a -A -d -aes-128-cbc"
OPENSSL_AES_CBC_256_DEC="openssl enc -a -A -d -aes-256-cbc"
OPENSSL_MD5="openssl md5"


# 1:message_error
function showError {
	echo -e "\n$1\n" 1>&2
	exit 1
}

function showHelp {
	echo -e "\nmegadown v$VERSION - https://github.com/tonikelope/megadown"
	echo -e "\ncli downloader for mega.nz and megacrypter"

	echo -e "\nSingle url mode:           megadown ['URL'] [OPTION]...\n"
	
	echo -e "\tOptions:"
	echo -e "\t-o,\t--output FILE_NAME    Store file with this name."
	echo -e "\t-s,\t--speed SPEED         Download speed limit (500b, 500k, 2m)."
	echo -e "\t-p,\t--password PASSWORD   Password for MegaCrypter links."

	echo -e "\nMulti url mode:            megadown [-l URL_LIST_FILE] [OPTION]...\n"
	echo -e "\tFile line format:          URL [optional_file_name]\n"
	echo -e "\tOptions:"
	echo -e "\t-s,\t--speed SPEED         Download speed limit (500b, 500k, 2m)."
	echo -e "\t-p,\t--password PASSWORD   Password for MegaCrypter links (same for every link in a list)."

	echo ''
}

function check_deps {

	dep_error=0

	for i in openssl python pv wget; do
		
		if [ "$(which "$i" 2>&1 | grep -o "which: no ${i} in")" ]; then
			
			echo -ne "\n[$i] is required and it's not installed"
			dep_error=1
		
		else

			case "$i" in
			
				openssl)     
					for i in "aes-128-ctr" "aes-128-cbc" "aes-256-cbc"; do

						if [ -z "$(openssl enc --help 2>&1 | grep -o "$i" | head -n1)" ]; then

							echo -ne "Your openssl binary does not support ${i}"
							dep_error=1

						fi

					done
				;;

				python)
					
					if [[ "$(python --version 2>&1 | grep -o -E '[0-9]\.[0-9]')" < "$PYTHON_MIN_VER" ]]; then

						echo -ne "python >= ${PYTHON_MIN_VER} is required"
						dep_error=1

					fi
				;;
			esac
		fi

	done

	if [ $dep_error -ne 0 ]; then
		showError "ERROR: there are dependencies not present!"
	fi
}

# 1:b64_encoded_String
function b64_pad {
	b64=$(echo -n "$1" | tr '\-_' '+/')
	pad=$(((4-${#1}%4)%4))

	for i in $(seq 1 $pad); do
		b64="${b64}="
	done

	echo -n "$b64"
}

function urlb64_to_b64 {

	echo -n "$1" | tr "\-_" "+/" | tr -d ','
}

# 1:mega://enc link
function decrypt_md_link {
	
	link=$(urlb64_to_b64 "$1")

	data=$($HELPERS regex_imatch "^.*?mega:\/\/enc\d*?\?([a-z0-9\/+]+).*?$", "$link", 1)

	iv="79F10A01844A0B27FF5B2D4E0ED3163E"
	
	if [ $(echo $link | grep 'mega://enc?') ]; then
		
		key="6B316F36416C2D316B7A3F217A30357958585858585858585858585858585858"
		
	elif [ $(echo $link | grep 'mega://enc2?') ];then
	
		key="ED1F4C200B35139806B260563B3D3876F011B4750F3A1A4A5EFD0BBE67554B44"
	fi

	echo -n "https://mega.nz/#"$(echo -n $(b64_pad "$data") | $OPENSSL_AES_CBC_256_DEC -K "$key" -iv "$iv")
}

# 1:hex_raw_key
function hrk2hk {
	hk[0]=$(( 0x${1:0:16} ^ 0x${1:32:16} ))
	hk[1]=$(( 0x${1:16:16} ^ 0x${1:48:16} ))

	printf "%016x" ${hk[*]}
} 

# 1:link
function get_mc_link_info {
	
	MC_API_URL=$(echo -n "$1" | grep -i -E -o 'https?://[^/]+')"/api"
	
	wget_exit_code=1
	
	info_link=$(wget -q --header='Content-Type: application/json' --post-data "{\"m\":\"info\", \"link\":\"$1\"}" -O - "$MC_API_URL")
	
	wget_exit_code=$?
	
	if [ "$wget_exit_code" -ne 0 ]; then
		echo -e "ERROR: Oooops, something went bad. WGET EXIT CODE (${wget_exit_code})"
		return 1
	fi	

	if [ $(echo $info_link | grep '"error"') ]; then
		error_code=$($HELPERS json_param "$info_link" error)
		echo -e "ERROR: MEGACRYPTER $error_code"
		return 1
	fi

	expire=$($HELPERS json_param "$info_link" expire)

	if [ "$expire" != "0" ]; then
	
		IFS='#' read -a array <<< "$expire"
	
		no_exp_token=${array[1]}
		
	else
		no_exp_token="$expire"
	fi

	file_name=$(echo -n $($HELPERS json_param "$info_link" name) | base64 -w 0 -i 2>/dev/null)
	
	path=$(echo -n $($HELPERS json_param "$info_link" path))
	
	if [ "$path" != "0" ]; then
		path=$(echo -n "$path" | base64 -w 0 -i 2>/dev/null)
	fi
	
	mc_pass=$($HELPERS json_param "$info_link" pass)
	
	file_size=$($HELPERS json_param "$info_link" size)
	
	key=$($HELPERS json_param "$info_link" key)
	
	echo -n "${file_name}@${path}@${file_size}@${mc_pass}@${key}@${no_exp_token}"
}

# 1:file_name 2:file_size 3:formatted_file_size [4:md5_mclink]
function check_file_exists {

	if [ -f "$1" ]; then
		
		actual_size=$(stat -c %s "$1")

		if [ "$actual_size" == "$2" ]; then
			
			if [ -n "$4" ] && [ -f ".${4}" ];then
				rm ".${4}"
			fi
			
			showError "WARNING: File $1 exists. Download aborted!"
		fi

		echo -n "\nFile $1 exists but with different size (${2} vs ${actual_size} bytes). Downloading [${3}] ...\n"
		
	else
	
		echo -n "\nDownloading $1 [${3}] ...\n"
		
	fi
}

# 1:file_size
function format_file_size {

	if [ "$1" -ge 1073741824 ]; then
		file_size_f=$(awk "BEGIN { rounded = sprintf(\"%.1f\", ${1}/1073741824); print rounded }")" GB"
	elif [ "$1" -ge 1048576 ];then
		file_size_f=$(awk "BEGIN { rounded = sprintf(\"%.1f\", ${1}/1048576); print rounded }")" MB"
	else
		file_size_f="${1} bytes"
	fi
	
	echo -ne "$file_size_f"
}


#MAIN STARTS HERE:
check_deps

if [ -z "$1" ]; then
	showHelp
	exit 1
fi

if [[ "$1" =~ ^http ]] || [[ "$1" =~ ^mega:// ]]; then
	link="$1"
fi

eval set -- "$(getopt -o "l:p:k:o:s:" -l "list:,password:,key:,output:,speed:" -- "$@")"

while true; do
	case "$1" in
		-l|--list)     list="$2";     shift 2;;
		-p|--password) password="$2"; shift 2;;
		-o|--output)   output="$2";   shift 2;;
		-s|--speed)    speed="$2";    shift 2;;

		--) shift; break;;

		*)
			showHelp
			exit 1;;
	esac
done

if [ -z "$link" ]; then

	if [ -z "$list" ]; then
	
		showHelp
		
		showError "ERROR: MEGA link or --list parameter is required"
		
	elif [ ! -f "$list" ]; then
	
		showHelp
		
		showError "ERROR: list file ${list} not found"
	fi
	
	echo -ne "\n(Pre)reading mc links info..."
	
	link_count=0
	
	while IFS='' read -r line || [ -n "$line" ]; do
		
		if [ -n "$line" ] && ! [ $(echo -n "$line" | grep -E -o 'mega://enc') ];then

			link=$($HELPERS regex_imatch "^.*?(https?\:\/\/[^\/]+\/[#!0-9a-z_-]+).*$", "$line", 1)
			
			if [ $(echo -n "$link" | grep -E -o 'https?://[^/]+/!') ]; then
			
				md5=$(echo -n "$link" | $OPENSSL_MD5 | grep -E -o '[0-9a-f]{32}')
				
				if ! [ -f ".${md5}" ];then
				
					mc_link_info=$(get_mc_link_info "$link")

					if ! [ "$?" -eq 1 ];then
						echo -n "$mc_link_info" >> ".${md5}"
					fi
				fi
				
				link_count=$((link_count + 1))
			fi
		fi
	
	done < "$list"
	
	echo -ne " OK(${link_count} MC links found)\n"
	
	while IFS='' read -r line || [ -n "$line" ]; do
	
		if [ -n "$line" ];then
		
			if [ $(echo -n "$line" | grep -E -o 'mega://enc') ]; then

				link=$($HELPERS regex_imatch "^.*?(mega:\/\/enc\d*?\?[a-z0-9_-]+).*$", "$line", 1)

				output=$($HELPERS regex_imatch "^.*?mega:\/\/enc\d*?\?[a-z0-9_-]+(.*)$", "$line", 1, 1)


			elif [ $(echo -n "$line" | grep -E -o 'https?://') ]; then

				link=$($HELPERS regex_imatch ".*?(https?\:\/\/[^\/]+\/[#!0-9a-z_-]+).*$", "$line", 1)

				output=$($HELPERS regex_imatch "^.*?https?\:\/\/[^\/]+\/[#!0-9a-z_-]+(.*)$", "$line", 1, 1)

			else
				continue
			fi
			
			$SCRIPT "$link" --output="$output" --password="$password" --speed="$speed"

		fi
	
	done < "$list"

	exit 0
fi

if [ $(echo -n "$link" | grep -E -o 'mega://enc') ]; then
	link=$(decrypt_md_link "$link")
fi

echo -ne "\nReading link metadata..."

if [ $(echo -n "$link" | grep -E -o 'mega(\.co)?\.nz') ]; then
	
	#MEGA.CO.NZ LINK

	link=$($HELPERS str_ireplace "/#!N?" "/#N!" "$link")

	file_id=$($HELPERS regex_match "^.*\/#.*?!(.+)!.*$" "$link" 1)

	file_key=$($HELPERS regex_match "^.*\/#.*?!.+!(.+)$" "$link" 1)
	
	hex_raw_key=$(echo -n $(b64_pad $file_key) | base64 -d -i 2>/dev/null | od -An -t x1 | tr -d '\n ')
	
	mega_req_url="${MEGA_API_URL}/cs?id=&ak="
	
	if [ $(echo -n "$link" | grep -E -o 'mega(\.co)?\.nz/#!') ]; then
		mega_req_json="[{\"a\":\"g\", \"p\":\"$file_id\"}]"
	elif [ $(echo -n "$link" | grep -E -o -i 'mega(\.co)?\.nz/#N!') ]; then
		mega_req_json="[{\"a\":\"g\", \"n\":\"$file_id\"}]"
	fi
	
	mega_res_json=$(wget -q --header='Content-Type: application/json' --post-data "$mega_req_json" -O - "$mega_req_url")
	
	wget_exit_code=$?
	
	if [ "$wget_exit_code" -ne 0 ]; then
		showError "Oooops, something went bad. WGET EXIT CODE (${wget_exit_code})"
	fi	

	if [ $(echo -n "$mega_res_json" | grep -E -o '\[\-[0-9]+\]') ]; then
		
		error_code=$($HELPERS regex_match "^.*\[(.*?)\].*$" "$mega_res_json" 1)
		showError "ERROR: MEGA $error_code"
	fi

	file_size=$($HELPERS json_param "$mega_res_json" s)
	at=$($HELPERS json_param "$mega_res_json" at)
	hex_key=$(hrk2hk "$hex_raw_key")
	at_dec_json=$(echo -n $(b64_pad "$at") | $OPENSSL_AES_CBC_128_DEC -K $hex_key -iv "00000000000000000000000000000000" -nopad)

	if [ ! $(echo -n "$at_dec_json" | grep -E -o 'MEGA') ]; then
		showError "ERROR: MEGA bad link"
	fi

	if [ -z "$output" ]; then
		file_name=$($HELPERS json_param "$(echo -n "$at_dec_json" | grep -E -o '\{.+\}')" n)
	else
		file_name="$output"
	fi
	
	download_message=$(check_file_exists "$file_name" "$file_size" "$(format_file_size "$file_size")")
	
	if [ $(echo -n "$link" | grep -E -o 'mega(\.co)?\.nz/#!') ]; then
		mega_req_json="[{\"a\":\"g\", \"g\":\"1\", \"p\":\"$file_id\"}]"
	elif [ $(echo -n "$link" | grep -E -o -i 'mega(\.co)?\.nz/#N!') ]; then
		mega_req_json="[{\"a\":\"g\", \"g\":\"1\", \"n\":\"$file_id\"}]"
	fi
	
	wget_exit_code=$?
	
	mega_res_json=$(wget -q --header='Content-Type: application/json' --post-data "$mega_req_json" -O - "$mega_req_url")
	
	if [ "$wget_exit_code" -ne 0 ]; then
		showError "Oooops, something went bad. WGET EXIT CODE (${wget_exit_code})"
	fi	
	
	dl_temp_url=$($HELPERS json_param "$mega_res_json" g)
else
	
	#MEGACRYPTER LINK
	
	MC_API_URL=$(echo -n "$1" | grep -i -E -o 'https?://[^/]+')"/api"
	
	md5=$(echo -n "$link" | $OPENSSL_MD5 | grep -E -o '[0-9a-f]{32}')
	
	if [ -f ".${md5}" ];then
		mc_link_info=$(cat ".${md5}")
	else
		mc_link_info=$(get_mc_link_info "$link")
		
		if [ "$?" -eq 1 ];then
			echo -e "$mc_link_info"
			exit 1
		fi
		
		echo -n "$mc_link_info" >> ".${md5}"
	fi
		
	IFS='@' read -a array <<< "$mc_link_info"
	
	if [ -z "$output" ];then 
		file_name=$(echo -n "${array[0]}" | base64 -d -i 2>/dev/null)
	else
		file_name="$output"
	fi
	
	path=${array[1]}
	
	if [ "$path" != "0" ]; then
		path=$(echo -n "$path" | base64 -d -i 2>/dev/null)
	fi
	
	file_size=${array[2]}
	
	mc_pass=${array[3]}
	
	key=${array[4]}
	
	no_exp_token=${array[5]}

	if [ "$path" != "0" ] && [ "$path" != "" ]; then
		
		if [ ! -d "$path" ]; then
		
			mkdir -p "$path"
		fi
		
		file_name="${path}${file_name}"
	fi
	
	if [ "$mc_pass" != "0" ]; then
		if [ -z "$password" ]; then
			if [ $($HELPERS password_check "$password" "$mc_pass") == "0" ]; then
				pass=""
			fi
		fi

		if [ -z "$pass" ]; then
			read -e -p "Link is password protected. Enter password: " pass

			pass_hash=$($HELPERS password_check "$pass" "$mc_pass")

			until [ "$pass_hash" != "0" ]; do
				read -e -p "Wrong password! Try again: " pass
				pass_hash=$($HELPERS password_check "$pass" "$mc_pass")
			done
		fi
		
		IFS='#' read -a array <<< "$pass_hash"
		
		pass_hash=${array[0]}
		
		iv=${array[1]}

		hex_raw_key=$(echo -n $(b64_pad "$key") | $OPENSSL_AES_CBC_256_DEC -K $pass_hash -iv "$iv" | od -An -t x1 | tr -d '\n ')

		if [ -z "$output" ]; then
			file_name=$(echo -n $(b64_pad "$file_name") | $OPENSSL_AES_CBC_256_DEC -K $pass_hash -iv "$iv")
		fi
	else
		hex_raw_key=$(echo -n $(b64_pad "$key") | base64 -d -i 2>/dev/null | od -An -t x1 | tr -d '\n ')
	fi

	download_message=$(check_file_exists "$file_name" "$file_size" "$(format_file_size "$file_size")" "$md5")
	
	hex_key=$(hrk2hk "$hex_raw_key")
	
	dl_link=$(wget -q --header='Content-Type: application/json' --post-data "{\"m\":\"dl\", \"link\":\"$link\", \"noexpire\":\"$no_exp_token\"}" -O - "$MC_API_URL")

	wget_exit_code=$?
	
	if [ "$wget_exit_code" -ne 0 ]; then
		showError "Oooops, something went bad. WGET EXIT CODE (${wget_exit_code})"
	fi	

	if [ $(echo $dl_link | grep '"error"') ]; then
		error_code=$($HELPERS json_param "$dl_link" error)

		showError "ERROR: MEGACRYPTER $error_code"
	fi

	dl_temp_url=$($HELPERS json_param "$dl_link" url)
	
	if [ "$mc_pass" != "0" ]; then

		iv=$(echo -n $(b64_pad $($HELPERS json_param "$dl_link" pass)) | base64 -d -i 2>/dev/null | od -An -t x1 | tr -d '\n ')
		
		dl_temp_url=$(echo -n $(b64_pad "$dl_temp_url") | $OPENSSL_AES_CBC_256_DEC -K $pass_hash -iv "$iv")
	fi
fi

if [ -z "$speed" ]; then
	DL_COMMAND="wget -q -O - "
else
	DL_COMMAND="wget -q --limit-rate $speed -O - "
fi

if [ "$output" == "-" ]; then
	
	hex_iv="${hex_raw_key:32:16}0000000000000000"
	
	$DL_COMMAND "$dl_temp_url" | $OPENSSL_AES_CTR_128_DEC -K $hex_key -iv $hex_iv

	exit 0
fi

echo -e "\tOK"

echo -e "$download_message"

wget_exit_code=1

until [ "$wget_exit_code" -eq 0 ]; do
	if [ -f "${file_name}.temp" ]; then
		echo -e "(Resuming previous download ...)\n"

		temp_size=$(stat -c %s "${file_name}.temp")
		offset=$(($temp_size-$(($temp_size%16))))
		iv_forward=$(printf "%016x" $(($offset/16)))
		hex_iv="${hex_raw_key:32:16}$iv_forward"

		truncate -s $offset "${file_name}.temp"

		$DL_COMMAND "$dl_temp_url/$offset" | pv -s $(($file_size-$offset)) | $OPENSSL_AES_CTR_128_DEC -K $hex_key -iv $hex_iv >> "${file_name}.temp"
	else
		hex_iv="${hex_raw_key:32:16}0000000000000000"
		$DL_COMMAND "$dl_temp_url" | pv -s $file_size | $OPENSSL_AES_CTR_128_DEC -K $hex_key -iv $hex_iv > "${file_name}.temp"
	fi

	wget_exit_code=$?

	if [ "$wget_exit_code" -ne 0 ]; then
		showError "Oooops, download failed! WGET EXIT CODE (${wget_exit_code})"
	fi	
done

if [ ! -f "${file_name}.temp" ]; then
	showError "ERROR: FILE ${file_name} COULD NOT BE DOWNLOADED :(!"
fi

mv "${file_name}.temp" "${file_name}"

if [ -f ".${md5}" ];then
	rm ".${md5}"
fi

echo -e "\nFILE DOWNLOADED as ${file_name} :)!\n"

exit 0
